<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"
     xmlns:ui="http://schemas.microsoft.com/wix/UIExtension"
     xmlns:util="http://schemas.microsoft.com/wix/UtilExtension"
     xmlns:netfx="http://schemas.microsoft.com/wix/NetFxExtension">

  <?include mySampleVersionInfo.wxi ?>

  <!-- Id="*" to allow reinstalling and automatically removing previous version-->
  <Product Id="*" Name="$(var.PRODUCT_NAME)" Language="1033" Codepage='1252' Version="$(var.PRODUCTVERSION)" Manufacturer="$(var.COMPANY_NAME)" UpgradeCode="$(var.PRODUCTGUID)">

    <Package Comments="$(var.PRODUCT_NAME) $(var.ProcessorArchitecture) $(var.PRODUCTVERSION)" InstallPrivileges ="elevated" InstallerVersion="200" Compressed="yes" InstallScope="perMachine" Languages='1033' SummaryCodepage='1252' Platform="$(var.ProcessorArchitecture)" />

    <MajorUpgrade DowngradeErrorMessage="A newer version of $(var.PRODUCT_NAME) is already installed." AllowSameVersionUpgrades="yes" />
    <Media Id="1" Cabinet="$(var.PRODUCT_NAME)_$(var.ProcessorArchitecture).cab" EmbedCab="yes" />

    <Feature Id="ProductFeature" Title="$(var.PRODUCT_NAME)" Level="1" Description="$(var.PRODUCT_NAME) $(var.ProcessorArchitecture)" ConfigurableDirectory='INSTALLFOLDER'>
      <ComponentGroupRef Id="_ComponentGpID_MySample" />
    </Feature>

    <Property Id="TARGETDIR" Secure="yes" />
    <Property Id="INSTALLFOLDER" Secure="yes" />

    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="ProgramFilesFolder">
        <Directory Id="ManufacturerFolder" Name="$(var.COMPANY_NAME)">
          <Directory Id="INSTALLFOLDER" Name="$(var.PRODUCT_NAME)">
          </Directory>
        </Directory>
      </Directory>
    </Directory>

    <!-- UI information-->
    <Property Id="ARPPRODUCTICON" Value="_FileID_Icon.ico" />
    <Property Id="WIXUI_INSTALLDIR" Value="INSTALLFOLDER" />
    <Property Id="WIXUI_ARPNOMODIFY" Value="yes" Secure="yes" />
    <UIRef Id="WixUI_InstallDir" />
    <UIRef Id="WixUI_ErrorProgressText" />

    <!-- WixUILicenseRtf: License file. -->
    <WixVariable Id="WixUILicenseRtf" Value="Resources\product_License.rtf" />
    <!-- WixUIBannerBmp: 493 by 58 pixels, this bitmap will appear at the top of all but the first page of the installer. -->
    <WixVariable Id="WixUIBannerBmp" Value="Resources\companySetupBanner.bmp" />
    <!-- WixUIDialogBmp: 493 by 312 pixels, this bitmap will appear on the first page of the installer. -->
    <WixVariable Id="WixUIDialogBmp" Value="Resources\companySetupDialog.bmp" />
    <Icon Id="_FileID_Icon.ico" SourceFile="Resources\company.ico"/>

    <!--
      WS058503: Note about Secure=yes. If installed with UAC enabled, the uninstall process failed to remove files due to not allowed properties.
      Secure=yes must be used to fixed the issue as describe here: http://www.installsite.org/pages/en/msi/articles/VistaMSI/
    -->

    <PropertyRef Id="NETFRAMEWORK40FULL" />
    <Condition Message="This setup requires the .NET Framework 4.0 to be installed.">
      <![CDATA[Installed OR NETFRAMEWORK40FULL]]>
    </Condition>
    
    <!-- Detect if at least one office excel has been found, to this aim use installation PATH -->
    <!--EXCELSUPPORTEDVERSION-->
       <Property Id="EXCEL2007INSTALLPATH" Secure="yes">
      <RegistrySearch Id="OfficeExcel2007InstallPath64" Root="HKLM" Key="SOFTWARE\Microsoft\Office\12.0\Excel\InstallRoot" Name="Path" Type="raw" Win64="yes" />
      <RegistrySearch Id="OfficeExcel2007InstallPath32" Root="HKLM" Key="SOFTWARE\Microsoft\Office\12.0\Excel\InstallRoot" Name="Path" Type="raw" Win64="no" />
    </Property>
    <Property Id="EXCEL2010INSTALLPATH" Secure="yes">
      <RegistrySearch Id="OfficeExcel2010InstallPath64" Root="HKLM" Key="SOFTWARE\Microsoft\Office\14.0\Excel\InstallRoot" Name="Path" Type="raw" Win64="yes" />
      <RegistrySearch Id="OfficeExcel2010InstallPath32" Root="HKLM" Key="SOFTWARE\Microsoft\Office\14.0\Excel\InstallRoot" Name="Path" Type="raw" Win64="no" />
    </Property>
    <Property Id="EXCEL2013INSTALLPATH" Secure="yes">
      <RegistrySearch Id="OfficeExcel2013InstallPath64" Root="HKLM" Key="SOFTWARE\Microsoft\Office\15.0\Excel\InstallRoot" Name="Path" Type="raw" Win64="yes" />
      <RegistrySearch Id="OfficeExcel2013InstallPath32" Root="HKLM" Key="SOFTWARE\Microsoft\Office\15.0\Excel\InstallRoot" Name="Path" Type="raw" Win64="no" />
    </Property>
    
    <Condition Message="This setup requires Office Excel 2007 and/or 2010 and/or 2013 (32-bit or 64-bit).">
      <![CDATA[Installed OR EXCEL2007INSTALLPATH OR EXCEL2010INSTALLPATH OR EXCEL2013INSTALLPATH]]>
    </Condition>

    <!--command arguments to pass to .exe-->
    <Property Id="CREATE_HKCU_OPEN_CMD" Value="/install $(var.XLL32) $(var.XLL64) $(var.OFFICEREGKEYS)" />
    <Property Id="REMOVE_HKCU_OPEN_CMD" Value="/uninstall $(var.XLL32) $(var.XLL64) $(var.OFFICEREGKEYS)" />
    
    <!-- Custom Actions -->
    <Binary Id="_BinID_CustomAction" SourceFile="$(var.CADLLFULLPATH)" />

    <!--These .Exe Custom action should not be impersonate to modify the current user HKCU-->
    <!--This two custom actions (call a the .exe) are responsible for set/remove the HKCU key for the current user.-->
    <CustomAction Id="Action_SetOPENHKCU_Cmd" Property="Action_SetOPENHKCU"  Execute="immediate" Value='"[INSTALLFOLDER]$(var.manageOpenKeyExeName)" [CREATE_HKCU_OPEN_CMD]' />
    <CustomAction Id="Action_SetOPENHKCU" Return="check" BinaryKey="WixCA" DllEntry="CAQuietExec" Execute="deferred"/>

    <CustomAction Id="Action_RemoveOPENHKCU_Cmd" Property="Action_RemoveOPENHKCU"  Execute="immediate" Value='"[INSTALLFOLDER]$(var.manageOpenKeyExeName)" [REMOVE_HKCU_OPEN_CMD]'/>
    <CustomAction Id="Action_RemoveOPENHKCU" Return="check" BinaryKey="WixCA"  DllEntry="CAQuietExec" Execute="deferred" />
    
    <!--These C# Custom action should not be impersonate to modify the HKLM-->
    <!--This custom action is used to set up the ActiveSetup HKLM key for install that uses the CREATE_HKCU_OPEN_CMD-->
    <CustomAction Id="Action_ActiveSetup_SetHKLM.SetProperty" Return="check" Property="Action_ActiveSetup_SetHKLM" Value='CREATE_HKCU_OPEN_FULL="[INSTALLFOLDER]$(var.manageOpenKeyExeName)" [CREATE_HKCU_OPEN_CMD];REMOVE_HKCU_OPEN_FULL="[INSTALLFOLDER]$(var.manageOpenKeyExeName)" [REMOVE_HKCU_OPEN_CMD];ACTIVESETUP_GUID=$(var.ACTIVESETUP_GUID);VERSION=$(var.PRODUCTVERSION);COMPANYNAME=$(var.COMPANY_NAME);PRODUCTNAME=$(var.PRODUCT_NAME)' />
    <CustomAction Id="Action_ActiveSetup_SetHKLM" BinaryKey="_BinID_CustomAction" Impersonate="no" DllEntry="CaActiveSetup_SetHKLM" Return="check" Execute="commit" />
    
    <!--This custom action  is used to set up the ActiveSetup HKLM key for uninstall that uses the REMOVE_HKCU_OPEN_CMD-->
    <CustomAction Id="Action_ActiveSetup_RemoveHKLM.SetProperty" Return="check" Property="Action_ActiveSetup_RemoveHKLM" Value='CREATE_HKCU_OPEN_FULL="[INSTALLFOLDER]$(var.manageOpenKeyExeName)" [CREATE_HKCU_OPEN_CMD];REMOVE_HKCU_OPEN_FULL="[INSTALLFOLDER]$(var.manageOpenKeyExeName)" [REMOVE_HKCU_OPEN_CMD];ACTIVESETUP_GUID=$(var.ACTIVESETUP_GUID);VERSION=$(var.PRODUCTVERSION);COMPANYNAME=$(var.COMPANY_NAME);PRODUCTNAME=$(var.PRODUCT_NAME)' />
    <CustomAction Id="Action_ActiveSetup_RemoveHKLM" BinaryKey="_BinID_CustomAction" Impersonate="no" DllEntry="CaActiveSetup_RemoveHKLM" Return="check" Execute="commit" />

    <!--These C# Custom action needs to be impersonate to modify the HKCU-->
    <!--This custom action is used to set up the ActiveSetup HKCU key -->
    <CustomAction Id="Action_ActiveSetup_SetHKCU.SetProperty" Return="check" Property="Action_ActiveSetup_SetHKCU" Value='CREATE_HKCU_OPEN_FULL="[INSTALLFOLDER]$(var.manageOpenKeyExeName)" [CREATE_HKCU_OPEN_CMD];REMOVE_HKCU_OPEN_FULL="[INSTALLFOLDER]$(var.manageOpenKeyExeName)" [REMOVE_HKCU_OPEN_CMD];ACTIVESETUP_GUID=$(var.ACTIVESETUP_GUID);VERSION=$(var.PRODUCTVERSION);COMPANYNAME=$(var.COMPANY_NAME);PRODUCTNAME=$(var.PRODUCT_NAME)' />
    <CustomAction Id="Action_ActiveSetup_SetHKCU" BinaryKey="_BinID_CustomAction" Impersonate="yes" DllEntry="CaActiveSetup_SetHKCU" Return="check" Execute="commit" />

    <CustomAction Id="Action_ActiveSetup_RemoveHKCU.SetProperty" Return="check" Property="Action_ActiveSetup_RemoveHKCU" Value='CREATE_HKCU_OPEN_FULL="[INSTALLFOLDER]$(var.manageOpenKeyExeName)" [CREATE_HKCU_OPEN_CMD];REMOVE_HKCU_OPEN_FULL="[INSTALLFOLDER]$(var.manageOpenKeyExeName)" [REMOVE_HKCU_OPEN_CMD];ACTIVESETUP_GUID=$(var.ACTIVESETUP_GUID);VERSION=$(var.PRODUCTVERSION);COMPANYNAME=$(var.COMPANY_NAME);PRODUCTNAME=$(var.PRODUCT_NAME)' />
    <CustomAction Id="Action_ActiveSetup_RemoveHKCU" BinaryKey="_BinID_CustomAction" Impersonate="yes" DllEntry="CaActiveSetup_RemoveHKCU" Return="check" Execute="commit" />
    
     <!--Install Sequence--> 
    <InstallExecuteSequence>
      <!--INSTALL (+ Repair and Upgrade)-->
      <Custom Action="Action_SetOPENHKCU_Cmd" Before="Action_SetOPENHKCU">NOT Installed OR UPGRADINGCODE OR REINSTALL</Custom>
      <Custom Action="Action_SetOPENHKCU" Before="InstallFinalize">NOT Installed OR UPGRADINGCODE OR REINSTALL</Custom>
      
      <Custom Action="Action_ActiveSetup_SetHKLM.SetProperty" Before="Action_ActiveSetup_SetHKLM">NOT Installed OR UPGRADINGCODE OR REINSTALL</Custom>
      <Custom Action="Action_ActiveSetup_SetHKLM" Before="InstallFinalize">NOT Installed OR UPGRADINGCODE OR REINSTALL</Custom>

      <Custom Action="Action_ActiveSetup_SetHKCU.SetProperty" Before="Action_ActiveSetup_SetHKCU">NOT Installed OR UPGRADINGCODE OR REINSTALL</Custom>
      <Custom Action="Action_ActiveSetup_SetHKCU" Before="InstallFinalize">NOT Installed OR UPGRADINGCODE OR REINSTALL</Custom>

      <!--UNINSTALL-->
      <Custom Action="Action_RemoveOPENHKCU_Cmd" Before="Action_RemoveOPENHKCU">Installed AND NOT UPGRADINGPRODUCTCODE</Custom>
      <Custom Action="Action_RemoveOPENHKCU" Before="InstallFinalize">Installed AND NOT UPGRADINGPRODUCTCODE</Custom>
      
      <Custom Action="Action_ActiveSetup_RemoveHKLM.SetProperty" Before="Action_ActiveSetup_RemoveHKLM">Installed AND NOT UPGRADINGPRODUCTCODE</Custom>
      <Custom Action="Action_ActiveSetup_RemoveHKLM" Before="InstallFinalize">Installed AND NOT UPGRADINGPRODUCTCODE</Custom>

      <Custom Action="Action_ActiveSetup_RemoveHKCU.SetProperty" Before="Action_ActiveSetup_RemoveHKCU">Installed AND NOT UPGRADINGPRODUCTCODE</Custom>
      <Custom Action="Action_ActiveSetup_RemoveHKCU" Before="InstallFinalize">Installed AND NOT UPGRADINGPRODUCTCODE</Custom>     
    </InstallExecuteSequence>
    <AdminExecuteSequence>
      <!--INSTALL (+ Repair and Upgrade)-->
      <Custom Action="Action_SetOPENHKCU_Cmd" Before="Action_SetOPENHKCU">NOT Installed OR UPGRADINGCODE OR REINSTALL</Custom>
      <Custom Action="Action_SetOPENHKCU" Before="InstallFinalize">NOT Installed OR UPGRADINGCODE OR REINSTALL</Custom>

      <Custom Action="Action_ActiveSetup_SetHKLM.SetProperty" Before="Action_ActiveSetup_SetHKLM">NOT Installed OR UPGRADINGCODE OR REINSTALL</Custom>
      <Custom Action="Action_ActiveSetup_SetHKLM" Before="InstallFinalize">NOT Installed OR UPGRADINGCODE OR REINSTALL</Custom>

      <Custom Action="Action_ActiveSetup_SetHKCU.SetProperty" Before="Action_ActiveSetup_SetHKCU">NOT Installed OR UPGRADINGCODE OR REINSTALL</Custom>
      <Custom Action="Action_ActiveSetup_SetHKCU" Before="InstallFinalize">NOT Installed OR UPGRADINGCODE OR REINSTALL</Custom>

      <!--UNINSTALL-->
      <Custom Action="Action_RemoveOPENHKCU_Cmd" Before="Action_RemoveOPENHKCU">Installed AND NOT UPGRADINGPRODUCTCODE</Custom>
      <Custom Action="Action_RemoveOPENHKCU" Before="InstallFinalize">Installed AND NOT UPGRADINGPRODUCTCODE</Custom>

      <Custom Action="Action_ActiveSetup_RemoveHKLM.SetProperty" Before="Action_ActiveSetup_RemoveHKLM">Installed AND NOT UPGRADINGPRODUCTCODE</Custom>
      <Custom Action="Action_ActiveSetup_RemoveHKLM" Before="InstallFinalize">Installed AND NOT UPGRADINGPRODUCTCODE</Custom>

      <Custom Action="Action_ActiveSetup_RemoveHKCU.SetProperty" Before="Action_ActiveSetup_RemoveHKCU">Installed AND NOT UPGRADINGPRODUCTCODE</Custom>
      <Custom Action="Action_ActiveSetup_RemoveHKCU" Before="InstallFinalize">Installed AND NOT UPGRADINGPRODUCTCODE</Custom>
    </AdminExecuteSequence>

    <!-- Create our keys in the Registry -->
    <ComponentGroup Id="_ComponentGpID_MySample" >
      <!-- Files to copy in Program Files-->
      <Component Id="_CmpId_ProgramFiles" Directory="INSTALLFOLDER" Guid="$(var.COMPONENTGROUP_PRGMFILES_GUID)">
        <File Id="_FileId_Addin32" Source="$(var.XLLFULLPATH32)" />
        <File Id="_FileId_Addin64" Source="$(var.XLLFULLPATH64)" />
        
        <RegistryKey Root='HKLM' Key='Software\[Manufacturer]\[ProductName]' >
          <RegistryValue Action='write' Name='InstallPath' Type='string' Value='[INSTALLFOLDER]' />
          <RegistryValue Action='write' Name='ProductVersion' Type='string' Value='[ProductVersion]' />
          <RegistryValue Action='write' Name='ProductName' Type='string' Value='[ProductName]' />
        </RegistryKey>
      </Component>

      <!--Component for the active setup-->
      <!--this permanent because we need to keep that after install-->
      <Component  Id="_CmpId_ActiveSetup" Directory="INSTALLFOLDER"  Guid="$(var.COMPONENTGROUP_ACTIVESETUP_GUID)" Permanent="yes">
      <!--remove previous .exe and README.txt if found, does not fail if not present...-->
      <RemoveFile Id="_FileId_manageOpenKeyExe_Remove" On ="install" Name="$(var.manageOpenKeyExeName)"/>
      <RemoveFile Id="_FileId_manageOpenKeyREADME_Remove" On ="install" Name="$(var.manageOpenKeyREADMEName)"/>
      
      <File Id="_FileId_manageOpenKeyExe" Source="$(var.manageOpenKeyDir)$(var.manageOpenKeyExeName)" />
      <File Id="_FileId_manageOpenKeyREADME" Source="$(var.manageOpenKeyDir)$(var.manageOpenKeyREADMEName)" />
      </Component>
    </ComponentGroup>
  </Product>
</Wix>